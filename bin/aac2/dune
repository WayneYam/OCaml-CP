
 (rule
 (target p0_submit.ml)
 (deps p0.ml)
 (action
  (with-stdout-to %{target}
   (with-stdin-from %{deps}
    (chdir %{project_root} (run ./expander))))))

(executable
 (name p0_submit)
 (modules p0_submit)
 (libraries base core stdio str zarith)
 (preprocess (pps ppx_jane))
 (flags (-dsource)))

(executable
 (name p0)
 (modules p0)
 (libraries lib base core stdio str zarith)
 (preprocess (pps ppx_jane)))


 (rule
 (target p1_submit.ml)
 (deps p1.ml)
 (action
  (with-stdout-to %{target}
   (with-stdin-from %{deps}
    (chdir %{project_root} (run ./expander))))))

(executable
 (name p1_submit)
 (modules p1_submit)
 (libraries base core stdio str zarith)
 (preprocess (pps ppx_jane))
 (flags (-dsource)))

(executable
 (name p1)
 (modules p1)
 (libraries lib base core stdio str zarith)
 (preprocess (pps ppx_jane)))


 (rule
 (target p2_submit.ml)
 (deps p2.ml)
 (action
  (with-stdout-to %{target}
   (with-stdin-from %{deps}
    (chdir %{project_root} (run ./expander))))))

(executable
 (name p2_submit)
 (modules p2_submit)
 (libraries base core stdio str zarith)
 (preprocess (pps ppx_jane))
 (flags (-dsource)))

(executable
 (name p2)
 (modules p2)
 (libraries lib base core stdio str zarith)
 (preprocess (pps ppx_jane)))


 (rule
 (target p3_submit.ml)
 (deps p3.ml)
 (action
  (with-stdout-to %{target}
   (with-stdin-from %{deps}
    (chdir %{project_root} (run ./expander))))))

(executable
 (name p3_submit)
 (modules p3_submit)
 (libraries base core stdio str zarith)
 (preprocess (pps ppx_jane))
 (flags (-dsource)))

(executable
 (name p3)
 (modules p3)
 (libraries lib base core stdio str zarith)
 (preprocess (pps ppx_jane)))

